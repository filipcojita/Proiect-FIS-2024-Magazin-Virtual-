<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>TestableIO.System.IO.Abstractions.TestingHelpers</name>
    </assembly>
    <members>
        <member name="T:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor">
            <summary>
            Provides access to the file system storage.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData,System.IO.Abstractions.TestingHelpers.TimeAdjustments)">
            <summary>
            Adjust the times of the <paramref name="fileData" />.
            </summary>
            <param name="fileData">The <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> for which the times should be adjusted.</param>
            <param name="timeAdjustments">The adjustments to make on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.</param>
            <returns>The adjusted file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.GetFile(System.String)">
            <summary>
            Gets a file.
            </summary>
            <param name="path">The path of the file to get.</param>
            <returns>The file. <see langword="null" /> if the file does not exist.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.GetDrive(System.String)">
            <summary>
            Gets a drive.
            </summary>
            <param name="name">The name of the drive to get.</param>
            <returns>The drive. <see langword="null" /> if the drive does not exist.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AddFile(System.String,System.IO.Abstractions.TestingHelpers.MockFileData)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AddDirectory(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AddDrive(System.String,System.IO.Abstractions.TestingHelpers.MockDriveData)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AddFileFromEmbeddedResource(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AddFilesFromEmbeddedNamespace(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.MoveDirectory(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.RemoveFile(System.String)">
            <summary>
            Removes the file.
            </summary>
            <param name="path">The file to remove.</param>
            <remarks>
            The file must not exist.
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.FileExists(System.String)">
            <summary>
            Determines whether the file exists.
            </summary>
            <param name="path">The file to check. </param>
            <returns><see langword="true" /> if the file exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AllPaths">
            <summary>
            Gets all unique paths of all files and directories.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AllFiles">
            <summary>
            Gets the paths of all files.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AllDirectories">
            <summary>
            Gets the paths of all directories.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.AllDrives">
            <summary>
            Gets the names of all drives.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.StringOperations">
            <summary>
            Gets a helper for string operations.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.PathVerifier">
            <summary>
            Gets a helper for verifying file system paths.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor.FileSystem">
            <summary>
            Gets a reference to the underlying file system. 
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDirectory">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.IO.Abstractions.FileBase,System.String)">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String)">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary><param name="path">The directory to create.</param><returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is a file.  
 -or-  
 The network name is not known.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-  
<paramref name="path" /> is prefixed with, or contains, only a colon character (:).</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary><param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
 -or-  
 The directory is the application's current working directory.  
 -or-  
 The directory specified by <paramref name="path" /> is not empty.  
 -or-  
 The directory is read-only or contains a read-only file.  
 -or-  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
-or-  
The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory.</summary><param name="path">The name of the directory to remove.</param><param name="recursive"><see langword="true" /> to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, <see langword="false" />.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
 -or-  
 The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is <see langword="false" /> and <paramref name="path" /> is not an empty directory.  
 -or-  
 The directory is the application's current working directory.  
 -or-  
 The directory contains a read-only file.  
 -or-  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
-or-  
The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary><param name="path">The path to test.</param><returns><see langword="true" /> if <paramref name="path" /> refers to an existing directory; <see langword="false" /> if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary><param name="path">The path of the directory.</param><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary><param name="path">The path of the directory.</param><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary><returns>A string that contains the absolute path of the current working directory, and does not end with a backslash (\).</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.  
 This method is available in the .NET Compact Framework, but is not currently supported.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetDirectories(System.String)">
            <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetDirectories(System.String,System.String)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
-or-  
<paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-  
<paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary><param name="path">The path of a file or directory.</param><returns>A string that contains the volume information, root information, or both for the specified path.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
-or-  
A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
-or-  
A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
-or-  
<paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-  
<paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchpattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
-or-  
A network error has occurred.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file names and directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-  
<paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  
 The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary><returns>The logical drives on this computer.</returns><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary><param name="path">The path for which to retrieve the parent directory.</param><returns>The parent directory, or <see langword="null" /> if <paramref name="path" /> is the root directory, including the root of a UNC server or share name.</returns><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is read-only.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For more information, see the <see cref="T:System.IO.PathTooLongException" /> topic.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">.NET Framework only: The caller does not have the required permissions.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary><param name="sourceDirName">The path of the file or directory to move.</param><param name="destDirName">The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.</param><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.
 -or-  
 <paramref name="destDirName" /> already exists. See the Note in the Remarks section.
 -or-  
 The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory.  
 -or-  
 The directory or a file within it is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> or <paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary><param name="path">The path to which the current working directory is set.</param><exception cref="T:System.IO.IOException">An I/O error occurred.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" />.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  
 The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" />.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.  
 The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file names and directory names that  match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories.  
 The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
-or-
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
-or-  
<paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectory.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <param name="path" /><param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDirectoryData">
            <summary>
            The class represents the associated data of a file.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> class with the content of <paramref name="textContents" /> using the encoding of <see cref="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultEncoding" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryData.AccessControl">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo" /> class.
            </summary>
            <param name="mockFileDataAccessor">The mock file data accessor.</param>
            <param name="directoryPath">The directory path.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="mockFileDataAccessor" /> or <paramref name="directoryPath" /> is <see langref="null" />.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns><exception cref="T:System.IO.FileNotFoundException">The specified file doesn't exist. Only thrown when setting the property value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid. For example, it's on an unmapped drive. Only thrown when setting the property value.</exception><exception cref="T:System.Security.SecurityException">The caller doesn't have the required permission.</exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute.  
 -or-  
 The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns><see langword="true" /> if the file or directory exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Extension">
            <summary>Gets the string representing the extension part of the file.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.FullName">
            <summary>Gets the full path of the directory or file.</summary><returns>A string containing the full path.</returns><exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><returns>The time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><returns>The UTC time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><returns>The time the current file was last written.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><returns>The UTC time when the current file was last written to.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <see langword="Name" /> property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Create">
            <summary>Creates a directory.</summary><exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo" /> class.</summary><param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param><returns>The last directory specified in <paramref name="path" />.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> does not specify a valid file path or contains invalid <see langword="DirectoryInfo" /> characters.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The subdirectory cannot be created.  
 -or-  
 A file or directory already has the name specified by <paramref name="path" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.  
 -or-  
 The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo" /> object.  This can occur when the <paramref name="path" /> parameter describes an existing directory.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />, specifying whether to delete subdirectories and files.</summary><param name="recursive"><see langword="true" /> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo" /> object does not exist or could not be found.</exception><exception cref="T:System.IO.IOException">The directory is read-only.  
 -or-  
 The directory contains one or more files or subdirectories and <paramref name="recursive" /> is <see langword="false" />.  
 -or-  
 The directory is the application's current working directory.  
 -or-  
 There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary><returns>An enumerable collection of directories in the current directory.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of directories that matches <paramref name="searchPattern" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateDirectories(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary><returns>An enumerable collection of the files in the current directory.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of files that matches <paramref name="searchPattern" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFiles(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of file system information in the current directory.</summary><returns>An enumerable collection of file system information in the current directory.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary><returns>An array of <see cref="T:System.IO.DirectoryInfo" /> objects.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetDirectories(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFiles(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries representing all the files and subdirectories in a directory.</summary><returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories that match the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><returns>An array of strongly typed <see langword="FileSystemInfo" /> objects matching the search criteria.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo" /> objects that represent the files and subdirectories matching the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><returns>An array of file system entries that match the search criteria.</returns><exception cref="T:System.ArgumentException"><paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <param name="searchPattern" /><param name="enumerationOptions" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:System.IO.DirectoryInfo" /> instance and its contents to a new path.</summary><param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param><exception cref="T:System.ArgumentNullException"><paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="destDirName" /> is an empty string (''").</exception><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.  
 -or-  
 <paramref name="destDirName" /> already exists.  
 -or-  
 You are not authorized to access this path.  
 -or-  
 The directory being moved and the destination directory have the same name.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary><returns>The parent directory, or <see langword="null" /> if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.Root">
            <summary>Gets the root portion of the directory.</summary><returns>An object that represents the root of the directory.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfo.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory.New(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.DirectoryInfo" /> which implements <see cref="T:System.IO.Abstractions.IDirectoryInfo" />.
            </summary><param name="path">A string specifying the path on which to create the <see cref="T:System.IO.Abstractions.IDirectoryInfo" />.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDirectoryInfoFactory.Wrap(System.IO.DirectoryInfo)">
            <summary>
            Wraps the <paramref name="directoryInfo" /> in a wrapper for <see cref="T:System.IO.DirectoryInfo" /> which implements <see cref="T:System.IO.Abstractions.IDirectoryInfo" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDriveData">
            <summary>
            The class represents the associated data of a drive.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" /> class.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveData.#ctor(System.IO.Abstractions.TestingHelpers.MockDriveData)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" /> class by copying the given <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />.
            </summary>
            <param name="template">The template instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.AvailableFreeSpace">
            <summary>
            Gets or sets the amount of available free space of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />, in bytes.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.DriveFormat">
            <summary>
            Gets or sets the name of the file system of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />, such as NTFS or FAT32.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.DriveType">
            <summary>
            Gets or sets the drive type of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />, such as CD-ROM, removable, network, or fixed.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.IsReady">
            <summary>
            Gets or sets the value that indicates whether the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" /> is ready.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.TotalFreeSpace">
            <summary>
            Gets or sets the total amount of free space available on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />, in bytes.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.TotalSize">
            <summary>
            Gets or sets the total size of storage space on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />, in bytes.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveData.VolumeLabel">
            <summary>
            Gets or sets the volume label of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockDriveData" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDriveInfo">
            <summary>Provides access to information on a drive.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfo.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String)">
            <summary>Provides access to information on a drive.</summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.AvailableFreeSpace">
            <summary>Indicates the amount of available free space on a drive, in bytes.</summary><returns>The amount of free space available on the drive, in bytes.</returns><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.DriveFormat">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary><returns>The name of the file system on the specified drive.</returns><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive does not exist or is not mapped.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.DriveType">
            <summary>Gets the drive type, such as CD-ROM, removable, network, or fixed.</summary><returns>One of the enumeration values that specifies a drive type.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.IsReady">
            <summary>Gets a value that indicates whether a drive is ready.</summary><returns><see langword="true" /> if the drive is ready; <see langword="false" /> if the drive is not ready.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.Name">
            <summary>Gets the name of a drive, such as C:\.</summary><returns>The name of the drive.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.RootDirectory">
            <summary>Gets the root directory of a drive.</summary><returns>An object that contains the root directory of the drive.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.TotalFreeSpace">
            <summary>Gets the total amount of free space available on a drive, in bytes.</summary><returns>The total free space available on a drive, in bytes.</returns><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.TotalSize">
            <summary>Gets the total size of storage space on a drive, in bytes.</summary><returns>The total size of the drive, in bytes.</returns><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfo.VolumeLabel">
            <summary>Gets or sets the volume label of a drive.</summary><returns>The volume label.</returns><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The volume label is being set on a network or CD-ROM drive.  
 -or-  
 Access to the drive information is denied.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfo.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory.GetDrives">
            <summary>
            Retrieves the drive names of all logical drives on a computer.
            </summary><returns>An array of type <see cref="T:System.IO.Abstractions.IDriveInfo" /> that represents the logical drives on a computer.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory.New(System.String)">
            <summary>
            Provides access to the information on the specified drive.
            </summary><param name="driveName">
            A valid drive path or drive letter.
            This can be either uppercase or lowercase, 'a' to 'z'.
            A <see langword="null" /> value is not valid.
            </param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockDriveInfoFactory.Wrap(System.IO.DriveInfo)">
            <summary>
            Wraps the <paramref name="driveInfo" /> in a wrapper for <see cref="T:System.IO.DriveInfo" /> which implements <see cref="T:System.IO.Abstractions.IDriveInfo" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFile">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates a file if it does not already exist, appends the specified string to the file, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates the file if it does not already exist, appends the specified string to the file using the specified encoding, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the byte array containing the contents of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="bytes">The bytes to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, write the specified lines to the file by using the specified encoding, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="encoding">The encoding to apply to the string.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> is a directory.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> is a directory.  
-or-  
The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllText(System.String,System.String)">
            <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file using the specified encoding, creating the file if it does not already exist.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary><param name="path">The path to the file to append to.</param><returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.  
-or-  
<paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists.  
-or-  
An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory.</param><param name="overwrite"><see langword="true" /> if the destination file can be overwritten; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="destFileName" /> is read-only.
 -or-  
<paramref name="overwrite" /> is <see langword="true" />, <paramref name="destFileName" /> exists and is hidden, but <paramref name="sourceFileName" /> is not hidden.</exception><exception cref="T:System.ArgumentException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.  
-or-  
<paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists and <paramref name="overwrite" /> is <see langword="false" />.  
-or-  
An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary><param name="path">The path and name of the file to create.</param><returns>A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="path" /> specified a file that is read-only.
 -or-  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Create(System.String,System.Int32)">
            <summary>Creates or overwrites the specified file.</summary><param name="path">The name of the file.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><returns>A <see cref="T:System.IO.FileStream" /> with the specified buffer size that provides read/write access to the file specified in <paramref name="path" />.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="path" /> specified a file that is read-only.
 -or-  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>Creates or overwrites the specified file, specifying a buffer size and a <see cref="T:System.IO.FileOptions" /> value that describes how to create or overwrite the file.</summary><param name="path">The name of the file.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><param name="options">One of the <see cref="T:System.IO.FileOptions" /> values that describes how to create or overwrite the file.</param><returns>A new file with the specified buffer size.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="path" /> specified a file that is read-only.
 -or-  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text. If the file already exists, its contents are overwritten.</summary><param name="path">The file to be opened for writing.</param><returns>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="path" /> specified a file that is read-only.
 -or-  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)" /> method.</summary><param name="path">A path that describes a file to decrypt.</param><exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open.  
 -or-  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 The <paramref name="path" /> parameter specified a directory.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Delete(System.String)">
            <summary>Deletes the specified file.</summary><param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">The specified file is in use.  
 -or-  
 There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 The file is an executable file that is in use.  
 -or-  
 <paramref name="path" /> is a directory.  
 -or-  
 <paramref name="path" /> specified a read-only file.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><param name="path">A path that describes a file to encrypt.</param><exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
 -or-  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 The <paramref name="path" /> parameter specified a directory.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary><param name="path">The file to check.</param><returns><see langword="true" /> if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="path" /> is <see langword="null" />, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false" /> regardless of the existence of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetAttributes(System.String)">
            <summary>
            Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception>
            <exception cref="T:System.IO.IOException">This file is being used by another process.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetCreationTime(System.String)">
            <summary>Returns the creation date and time of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetCreationTimeUtc(System.String)">
            <summary>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><exception cref="T:System.IO.IOException">The destination file already exists.  
 -or-  
 <paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters as defined in <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><returns>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><returns>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.  
-or-  
<paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> or <paramref name="access" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file.</param><returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.  
-or-  
<paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.  
-or-  
<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary><param name="path">The file to be opened for reading.</param><returns>A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary><param name="path">The file to be opened for reading.</param><returns>A <see cref="T:System.IO.StreamReader" /> on the specified path.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary><param name="path">The file to be opened for writing.</param><returns>An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.</returns><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
 -or-  
 <paramref name="path" /> specified a read-only file or directory.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><returns>A byte array containing the contents of the file.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
 -or-  
 <paramref name="path" /> specified a directory.  
 -or-  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><returns>A string array containing all lines of the file.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><returns>A string array containing all lines of the file.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllText(System.String)">
            <summary>Opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><returns>A string containing all the text in the file.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><returns>A string containing all text in the file.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadLines(System.String)">
            <summary>Reads the lines of a file.</summary><param name="path">The file to read.</param><returns>All the lines of the file, or the lines that are the result of a query.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> is a directory.  
-or-  
The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.ReadLines(System.String,System.Text.Encoding)">
            <summary>Read the lines of a file that has a specified encoding.</summary><param name="path">The file to read.</param><param name="encoding">The encoding that is applied to the contents of the file.</param><returns>All the lines of the file, or the lines that are the result of a query.</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> is a directory.  
-or-  
The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Replace(System.String,System.String,System.String)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
 -or-  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
 -or-  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
-or-
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 Source or destination parameters specify a directory instead of a file.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
 -or-  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
 -or-  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
-or-
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 Source or destination parameters specify a directory instead of a file.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</summary><param name="path">The path to the file.</param><param name="fileAttributes">A bitwise combination of the enumeration values.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
-or-  
This operation is not supported on the current platform.  
-or-  
<paramref name="path" /> specified a directory.  
-or-  
The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTime">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTime">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create the contents for a collection class that takes an <see cref="T:System.Collections.Generic.IEnumerable`1" /> in its constructor, such as a <see cref="T:System.Collections.Generic.List`1" />, <see cref="T:System.Collections.Generic.HashSet`1" />, or a <see cref="T:System.Collections.Generic.SortedSet`1" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create a file that contains the following:
            <list type="bullet">
            <item>
            <description>The results of a LINQ to Objects query on the lines of a file, as obtained by using the ReadLines method.</description>
            </item>
            <item>
            <description>The contents of a collection that implements an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of strings.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding" /> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <see cref="M:Encoding.GetPreamble" /> method will return an empty byte array.
            If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            <para>
            Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file.
            The file handle is guaranteed to be closed by this method, even if exceptions are raised.
            </remarks>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileData">
            <summary>
            The class represents the associated data of a file.
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultEncoding">
            <summary>
            The default encoding.
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultDateTimeOffset">
            <summary>
            Gets the default date time offset.
            E.g. for not existing files.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.IsDirectory">
            <summary>
            Gets a value indicating whether the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> is a directory or not.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> class with the content of <paramref name="textContents" /> using the encoding of <see cref="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultEncoding" />.
            </summary>
            <param name="textContents">The textual content encoded into bytes with <see cref="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultEncoding" />.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileData.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> class with the content of <paramref name="textContents" /> using the encoding of <paramref name="encoding" />.
            </summary>
            <param name="textContents">The textual content.</param>
            <param name="encoding">The specific encoding used the encode the text.</param>
            <remarks>The constructor respect the BOM of <paramref name="encoding" />.</remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> class with the content of <paramref name="contents" />.
            </summary>
            <param name="contents">The actual content.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="contents" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileData.#ctor(System.IO.Abstractions.TestingHelpers.MockFileData)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> class by copying the given <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
            <param name="template">The template instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="template" /> is <see langword="null" />.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.Contents">
            <summary>
            Gets or sets the byte contents of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.TextContents">
            <summary>
            Gets or sets the string contents of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
            <remarks>
            The setter uses the <see cref="F:System.IO.Abstractions.TestingHelpers.MockFileData.DefaultEncoding" /> using this can scramble the actual contents.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.CreationTime">
            <summary>
            Gets or sets the date and time the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> was created.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.LastAccessTime">
            <summary>
            Gets or sets the date and time of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> was last accessed to.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.LastWriteTime">
            <summary>
            Gets or sets the date and time of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> was last written to.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileData.op_Implicit(System.String)~System.IO.Abstractions.TestingHelpers.MockFileData">
            <summary>
            Casts a string into <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
            <param name="s">The path of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> to be created.</param>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.Attributes">
            <summary>
            Gets or sets the specified <see cref="T:System.IO.FileAttributes" /> of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.AccessControl">
            <summary>
            Gets or sets <see cref="T:System.Security.AccessControl.FileSecurity" /> of the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileData.AllowedFileShare">
            <summary>
            Gets or sets the File sharing mode for this file, this allows you to lock a file for reading or writing.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileInfo">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String)">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns><exception cref="T:System.IO.FileNotFoundException">The specified file doesn't exist. Only thrown when setting the property value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid. For example, it's on an unmapped drive. Only thrown when setting the property value.</exception><exception cref="T:System.Security.SecurityException">The caller doesn't have the required permission.</exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute.  
 -or-  
 The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns><see langword="true" /> if the file or directory exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Extension">
            <summary>Gets the string representing the extension part of the file.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.FullName">
            <summary>Gets the full path of the directory or file.</summary><returns>A string containing the full path.</returns><exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><returns>The time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><returns>The UTC time that the current file or directory was last accessed.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><returns>The time the current file was last written.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><returns>The UTC time when the current file was last written to.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <see langword="Name" /> property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo" />.</summary><returns>A new <see langword="StreamWriter" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><returns>A new file with a fully qualified path.</returns><exception cref="T:System.ArgumentException"><paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) within the string but does not specify the volume.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><param name="overwrite"><see langword="true" /> to allow an existing file to be overwritten; otherwise, <see langword="false" />.</param><returns>A new file, or an overwrite of an existing file if <paramref name="overwrite" /> is <see langword="true" />. If the file exists and <paramref name="overwrite" /> is <see langword="false" />, an <see cref="T:System.IO.IOException" /> is thrown.</returns><exception cref="T:System.ArgumentException"><paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite" /> is <see langword="false" />.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Create">
            <summary>Creates a file.</summary><returns>A new file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.CreateText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.</summary><returns>A new <see langword="StreamWriter" />.</returns><exception cref="T:System.UnauthorizedAccessException">The file name is a directory.</exception><exception cref="T:System.IO.IOException">The disk is read-only.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt" /> method.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
 -or-  
 This operation is not supported on the current platform.  
 -or-  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName">The path to move the file to, which can specify a different file name.</param><exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName" /> is read-only or is a directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><returns>A file opened in the specified mode, with read/write access and unshared.</returns><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><returns>A <see cref="T:System.IO.FileStream" /> object opened in the specified mode and access, and unshared.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><param name="share">A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other <see langword="FileStream" /> objects have to this file.</param><returns>A <see cref="T:System.IO.FileStream" /> object opened with the specified mode, access, and sharing options.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream" />.</summary><returns>A new read-only <see cref="T:System.IO.FileStream" /> object.</returns><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader" /> with UTF8 encoding that reads from an existing text file.</summary><returns>A new <see langword="StreamReader" /> with UTF8 encoding.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream" />.</summary><returns>A write-only unshared <see cref="T:System.IO.FileStream" /> object for a new or existing file.</returns><exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is invalid, such as being on an unmapped drive.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
 -or-  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
 -or-  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise <see langword="false" />.</param><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
 -or-  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
 -or-  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Directory">
            <summary>Gets an instance of the parent directory.</summary><returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.</returns><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary><returns>A string representing the directory's full path.</returns><exception cref="T:System.ArgumentNullException"><see langword="null" /> was passed in for the directory name.</exception><exception cref="T:System.IO.PathTooLongException">The fully qualified path name exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary><returns><see langword="true" /> if the current file is read only; otherwise, <see langword="false" />.</returns><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
 -or-  
 The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to <see langword="false" />.</exception>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfo.Length">
            <summary>Gets the size, in bytes, of the current file.</summary><returns>The size of the current file in bytes.</returns><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file does not exist.  
 -or-  
 The <see langword="Length" /> property is called for a directory.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfo.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileInfoFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfoFactory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileInfoFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfoFactory.New(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileInfo" /> which implements <see cref="T:System.IO.Abstractions.IFileInfo" />.
            </summary><param name="fileName">
            The fully qualified name of the new file, or the relative file name.
            Do not end the path with the directory separator character.
            </param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileInfoFactory.Wrap(System.IO.FileInfo)">
            <summary>
            Wraps the <paramref name="fileInfo" /> in a wrapper for <see cref="T:System.IO.FileInfo" /> which implements <see cref="T:System.IO.Abstractions.IFileInfo" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileStream">
            <summary>
                Wrapper around a <see cref="T:System.IO.Stream" /> which is used as a replacement
                for a <see cref="T:System.IO.FileStream" />. As such it implements the same
                properties and methods as a <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileStream.Null">
            <summary>
                Wrapper around a <see cref="T:System.IO.Stream" /> with no backing store, which
                is used as a replacement for a <see cref="T:System.IO.Abstractions.FileSystemStream" />. As such
                it implements the same properties and methods as a <see cref="T:System.IO.Abstractions.FileSystemStream" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileOptions)">
            <summary>
                Wrapper around a <see cref="T:System.IO.Stream" /> which is used as a replacement
                for a <see cref="T:System.IO.FileStream" />. As such it implements the same
                properties and methods as a <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileStream.CanRead">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports reading.</summary><returns><see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileStream.CanWrite">
            <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary><returns><see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary><param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param><param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param><param name="count">The maximum number of bytes to be read from the current stream.</param><returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns><exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.NotSupportedException">The stream does not support reading.</exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</summary><param name="disposing"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.EndWrite(System.IAsyncResult)">
            <summary>Ends an asynchronous write operation. (Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</summary><param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">A handle to the pending write operation is not available.  
 -or-  
 The pending operation does not support writing.</exception><exception cref="T:System.InvalidOperationException"><paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.SetLength(System.Int64)">
            <summary>When overridden in a derived class, sets the length of the current stream.</summary><param name="value">The desired length of the current stream in bytes.</param><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary><param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param><param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param><param name="count">The number of bytes to be written to the current stream.</param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception><exception cref="T:System.IO.IOException">An I/O error occurred, such as the specified file cannot be found.</exception><exception cref="T:System.NotSupportedException">The stream does not support writing.</exception><exception cref="T:System.ObjectDisposedException"><see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary><param name="buffer">A region of memory. This method copies the contents of this region to the current stream.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary><param name="buffer">The buffer to write data from.</param><param name="offset">The zero-based byte offset in <paramref name="buffer" /> from which to begin copying bytes to the stream.</param><param name="count">The maximum number of bytes to write.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns><exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception><exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception><exception cref="T:System.NotSupportedException">The stream does not support writing.</exception><exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception><exception cref="T:System.InvalidOperationException">The stream is currently in use by a previous write operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <summary>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</summary><param name="buffer">The region of memory to write data from.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.WriteByte(System.Byte)">
            <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary><param name="value">The byte to write to the stream.</param><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.NotSupportedException">The stream does not support writing, or the stream is already closed.</exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Flush">
            <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.Flush(System.Boolean)">
            <inheritDoc cref="M:System.IO.FileStream.Flush(System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.FlushAsync(System.Threading.CancellationToken)">
            <summary>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</summary><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous flush operation.</returns><exception cref="T:System.ObjectDisposedException">The stream has been disposed.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStream.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission.</summary><param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param><exception cref="T:System.ArgumentException"><paramref name="access" /> is not a field of <see cref="T:System.IO.FileAccess" />.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, and buffer size.</summary><param name="handle">A file handle for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param><param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param><exception cref="T:System.ArgumentException">The <paramref name="handle" /> parameter is an invalid handle.  
 -or-  
 The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize" /> parameter is negative.</exception><exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class for the specified file handle, with the specified read/write permission, buffer size, and synchronous or asynchronous state.</summary><param name="handle">A file handle for the file that this <see langword="FileStream" /> object will encapsulate.</param><param name="access">A constant that sets the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object.</param><param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param><param name="isAsync"><see langword="true" /> if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">The <paramref name="handle" /> parameter is an invalid handle.  
 -or-  
 The <paramref name="handle" /> parameter is a synchronous handle and it was used asynchronously.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="bufferSize" /> parameter is negative.</exception><exception cref="T:System.IO.IOException">An I/O error, such as a disk error, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified file handle, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file handle is set for read-only access.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path and creation mode.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> contains an invalid value.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, and read/write permission.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> contains an invalid value.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write permission, and sharing permission.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param><param name="share">A constant that determines how the file will be shared by processes.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> contains an invalid value.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, and buffer size.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param><param name="share">A constant that determines how the file will be shared by processes.</param><param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param><param name="share">A constant that determines how the file will be shared by processes.</param><param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param><param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying <see langword="true" />, the handle might be opened synchronously depending on the platform. When opened asynchronously, the <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> and <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the <paramref name="useAsync" /> parameter to <see langword="true" />. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The system is running Windows 98 or Windows 98 Second Edition and <paramref name="share" /> is set to <see langword="FileShare.Delete" />.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.New(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.</summary><param name="path">A relative or absolute path for the file that the current <see langword="FileStream" /> object will encapsulate.</param><param name="mode">A constant that determines how to open or create the file.</param><param name="access">A constant that determines how the file can be accessed by the <see langword="FileStream" /> object. This also determines the values returned by the <see cref="P:System.IO.FileStream.CanRead" /> and <see cref="P:System.IO.FileStream.CanWrite" /> properties of the <see langword="FileStream" /> object. <see cref="P:System.IO.FileStream.CanSeek" /> is <see langword="true" /> if <paramref name="path" /> specifies a disk file.</param><param name="share">A constant that determines how the file will be shared by processes.</param><param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than 0 indicating the buffer size. The default buffer size is 4096.</param><param name="options">A value that specifies additional file options.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is an empty string (""), contains only white space, or contains one or more invalid characters.  
-or-  
<paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in an NTFS environment.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> refers to a non-file device, such as "con:", "com1:", "lpt1:", etc. in a non-NTFS environment.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bufferSize" /> is negative or zero.  
-or-  
<paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> contain an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found, such as when <paramref name="mode" /> is <see langword="FileMode.Truncate" /> or <see langword="FileMode.Open" />, and the file specified by <paramref name="path" /> does not exist. The file must already exist in these modes.</exception><exception cref="T:System.IO.IOException">An I/O error, such as specifying <see langword="FileMode.CreateNew" /> when the file specified by <paramref name="path" /> already exists, occurred.  
 -or-  
 The stream has been closed.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="access" /> requested is not permitted by the operating system for the specified <paramref name="path" />, such as when <paramref name="access" /> is <see langword="Write" /> or <see langword="ReadWrite" /> and the file or directory is set for read-only access.  
 -or-  
 <see cref="F:System.IO.FileOptions.Encrypted" /> is specified for <paramref name="options" />, but file encryption is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileStreamFactory.Wrap(System.IO.FileStream)">
            <summary>
                Wraps the <paramref name="fileStream" /> to the testable <see cref="T:System.IO.Abstractions.FileSystemStream" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileSystem">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.#ctor">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.#ctor(System.Collections.Generic.IDictionary{System.String,System.IO.Abstractions.TestingHelpers.MockFileData},System.String)">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.#ctor(System.IO.Abstractions.TestingHelpers.MockFileSystemOptions)">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.#ctor(System.Collections.Generic.IDictionary{System.String,System.IO.Abstractions.TestingHelpers.MockFileData},System.IO.Abstractions.TestingHelpers.MockFileSystemOptions)">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.StringOperations">
            <summary>
            Gets a helper for string operations.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.File">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.File" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.Directory">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.Directory" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.FileInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.FileStream">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.Path">
            <summary>
            Abstraction for static methods and properties in <see cref="T:System.IO.Path" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.DirectoryInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.DriveInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.FileSystemWatcher">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.FileSystem">
            <summary>
            Gets a reference to the underlying file system. 
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.PathVerifier">
            <summary>
            Gets a helper for verifying file system paths.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.MockTime(System.Func{System.DateTime})">
            <summary>
            Replaces the time provider with a mocked instance. This allows to influence the used time in tests.
            <para />
            If not set, the default implementation returns <see cref="P:System.DateTime.Now" />.
            </summary>
            <param name="dateTimeProvider">The function that returns the current <see cref="T:System.DateTime" />.</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AdjustTimes(System.IO.Abstractions.TestingHelpers.MockFileData,System.IO.Abstractions.TestingHelpers.TimeAdjustments)">
            <summary>
            Adjust the times of the <paramref name="fileData" />.
            </summary>
            <param name="fileData">The <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" /> for which the times should be adjusted.</param>
            <param name="timeAdjustments">The adjustments to make on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.</param>
            <returns>The adjusted file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.GetFile(System.String)">
            <summary>
            Gets a file.
            </summary>
            <param name="path">The path of the file to get.</param>
            <returns>The file. <see langword="null" /> if the file does not exist.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.GetDrive(System.String)">
            <summary>
            Gets a drive.
            </summary>
            <param name="name">The name of the drive to get.</param>
            <returns>The drive. <see langword="null" /> if the drive does not exist.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddFile(System.String,System.IO.Abstractions.TestingHelpers.MockFileData)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddEmptyFile(System.String)">
            <summary>
            Add a new file that is empty.
            </summary>
            <param name="path">A string representing the path of the new file to add.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddEmptyFile(System.IO.Abstractions.IFileInfo)">
            <summary>
            Add a new file that is empty.
            </summary>
            <param name="path">An <see cref="T:System.IO.Abstractions.IFileInfo" /> representing the path of the new file to add.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddDirectory(System.IO.Abstractions.IDirectoryInfo)">
            <summary>
            Add a new, empty directory.
            </summary>
            <param name="path">An <see cref="T:System.IO.Abstractions.IDirectoryInfo" /> representing the path of the new directory to add.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddFile(System.IO.Abstractions.IFileInfo,System.IO.Abstractions.TestingHelpers.MockFileData)">
            <summary>
            Add a new file with its contents set to a specified <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
            <param name="path">An <see cref="T:System.IO.Abstractions.IFileInfo" /> representing the path of the new file to add.</param>
            <param name="data">The data to use for the contents of the new file.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.GetFile(System.IO.Abstractions.IFileInfo)">
            <summary>
            Gets a file.
            </summary>
            <param name="path">The path of the file to get.</param>
            <returns>The file. <see langword="null" /> if the file does not exist.</returns>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddDirectory(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddFileFromEmbeddedResource(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddFilesFromEmbeddedNamespace(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.AddDrive(System.String,System.IO.Abstractions.TestingHelpers.MockDriveData)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.MoveDirectory(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.RemoveFile(System.String)">
            <summary>
            Removes the file.
            </summary>
            <param name="path">The file to remove.</param>
            <remarks>
            The file must not exist.
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystem.FileExists(System.String)">
            <summary>
            Determines whether the file exists.
            </summary>
            <param name="path">The file to check. </param>
            <returns><see langword="true" /> if the file exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.AllPaths">
            <summary>
            Gets all unique paths of all files and directories.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.AllNodes">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.AllFiles">
            <summary>
            Gets the paths of all files.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.AllDirectories">
            <summary>
            Gets the paths of all directories.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystem.AllDrives">
            <summary>
            Gets the names of all drives.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileSystemOptions">
            <summary>
                Constructor options for <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" />
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystemOptions.CurrentDirectory">
            <summary>
                The <see cref="M:System.IO.Directory.GetCurrentDirectory" /> with which the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileSystem" /> is initialized.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystemOptions.CreateDefaultTempDir">
            <summary>
            Flag indicating, if a temporary directory should be created.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.#ctor(System.IO.Abstractions.TestingHelpers.MockFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.New">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.New(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.New(System.String,System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param><param name="filter">
            The type of files to watch.
            For example, <c>"*.txt"</c> watches for changes to all text files.
            </param>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockFileSystemWatcherFactory.Wrap(System.IO.FileSystemWatcher)">
            <summary>
            Wraps the <paramref name="fileSystemWatcher" /> to the testable interface <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockPath">
            <summary>
            PathWrapper calls direct to Path but all this does is string manipulation so we can inherit directly from PathWrapper as no IO is done
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary><param name="path">The file or directory for which to obtain absolute path information.</param><returns>The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</returns><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
-or-  
The system could not retrieve the absolute path.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\").</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary><returns>The full path of the temporary file.</returns><exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.  
-or-
 This method was unable to create a temporary file.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary><returns>The path to the temporary folder, ending with a backslash.</returns><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockPath.GetRelativePath(System.String,System.String)">
            <summary>Returns a relative path from one path to another.</summary><param name="relativeTo">The source path the result should be relative to. This path is always considered to be a directory.</param><param name="path">The destination path.</param><returns>The relative path, or <paramref name="path" /> if the paths don't share the same root.</returns><exception cref="T:System.ArgumentNullException"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.MockUnixSupport">
            <summary>
            Provides helper methods for handling paths in a portable way.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockUnixSupport.Path(System.String)">
            <summary>
            Normalizes the given path so that it works on all platfoms.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockUnixSupport.IsUnixPlatform">
            <summary>
            Determines whether the current runtime platform is Unix.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.MockUnixSupport.IsWindowsPlatform">
            <summary>
            Determines whether the current runtime platform is Windows.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.PathVerifier">
            <summary>
            Provides helper methods for verifying paths.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.#ctor(System.IO.Abstractions.TestingHelpers.IMockFileDataAccessor)">
            <summary>
            Creates a new verifier instance.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.IsLegalAbsoluteOrRelative(System.String,System.String)">
            <summary>
            Determines whether the given path is legal.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.HasIllegalCharacters(System.String,System.Boolean)">
            <summary>
            Determines whether the given path contains illegal characters.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.CheckInvalidPathChars(System.String,System.Boolean)">
            <summary>
            Throws an excpetion if the given path contains invalid characters.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.NormalizeDriveName(System.String)">
            <summary>
            Determines the normalized drive name used for drive identification.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="name" /> is not a valid drive name.</exception>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.PathVerifier.TryNormalizeDriveName(System.String,System.String@)">
            <summary>
            Tries to determine the normalized drive name used for drive identification.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.StringOperations">
            <summary>
            Provides operations against path strings dependeing on the case-senstivity of the runtime platform.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.#ctor(System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.TestingHelpers.StringOperations.Comparer">
            <summary>
            Provides a string comparer.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.StartsWith(System.String,System.String)">
            <summary>
            Determines whether the given string starts with the given prefix.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.EndsWith(System.String,System.String)">
            <summary>
            Determines whether the given string ends with the given suffix.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.Equals(System.String,System.String)">
            <summary>
            Determines whether the given strings are equal.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.Equals(System.Char,System.Char)">
            <summary>
            Determines whether the given characters are equal.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.IndexOf(System.String,System.String)">
            <summary>
            Determines the index of the given substring in the string.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.IndexOf(System.String,System.String,System.Int32)">
            <summary>
            Determines the index of the given substring in the string.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.Contains(System.String,System.String)">
            <summary>
            Determines whether the given string contains the given substring.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces a given value by a new value.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.ToLower(System.Char)">
            <summary>
            Provides the lower-case representation of the given character.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.ToUpper(System.Char)">
            <summary>
            Provides the upper-case representation of the given character.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.ToLower(System.String)">
            <summary>
            Provides the lower-case representation of the given string.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.TestingHelpers.StringOperations.ToUpper(System.String)">
            <summary>
            Provides the upper-case representation of the given string.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.TestingHelpers.TimeAdjustments">
            <summary>
            Flags indicating which times to adjust for a <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />.
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.TimeAdjustments.None">
            <summary>
            Adjusts no times on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.TimeAdjustments.CreationTime">
            <summary>
            Adjusts the <see cref="P:System.IO.Abstractions.TestingHelpers.MockFileData.CreationTime" />
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.TimeAdjustments.LastAccessTime">
            <summary>
            Adjusts the <see cref="P:System.IO.Abstractions.TestingHelpers.MockFileData.LastAccessTime" />
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.TimeAdjustments.LastWriteTime">
            <summary>
            Adjusts the <see cref="P:System.IO.Abstractions.TestingHelpers.MockFileData.LastWriteTime" />
            </summary>
        </member>
        <member name="F:System.IO.Abstractions.TestingHelpers.TimeAdjustments.All">
            <summary>
            Adjusts all times on the <see cref="T:System.IO.Abstractions.TestingHelpers.MockFileData" />
            </summary>
        </member>
    </members>
</doc>
